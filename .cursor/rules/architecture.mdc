---
description:
globs:
alwaysApply: true
---

# アーキテクチャ

## 技術スタック

- 言語: TypeScript
- フレームワーク: Google Apps Script (GAS)
- データ管理: Google Spreadsheet
- テスト: Vitest
- デプロイ: clasp

## アーキテクチャパターン

### レイヤードアーキテクチャ

このプロジェクトでは**レイヤードアーキテクチャ**を採用し、各層の責務を明確に分離しています。

#### 各層の責務

##### リポジトリ層 (Repository Layer)

**主な責務:**

- データソース（スプレッドシート）との直接的なやり取りを担当
- データの物理的な格納方法（どのシート、どの列、どの行にあるか）を隠蔽
- CRUD（作成、読み取り、更新、削除）に類する、データの読み書き操作を提供

**具体例:**

- `sheet.getRange(...)`や`range.getBackground()`といった SpreadsheetApp の API を直接呼び出し
- 「ヘッダーが 2 行あり、データは 3 行目から始まる」「トレーニング名は 2 列目にある」といった物理的なレイアウト知識を持つ
- セルの値だけでなく、背景色、フォント、メモなども含む「データ」の読み取り

**なぜ他の層ではないのか:**

- **マッパー層**: 副作用のない（I/O を行わない）データ構造の変換が責務。I/O 処理を行うため不適切
- **サービス層**: ビジネスロジックを実行する層。データが「どこから」「どのように」取得されるかを知るべきではない

##### サービス層 (Service Layer)

**主な責務:**

- ビジネスロジックの実装
- データの加工と変換
- スケジュール生成ロジック
- リポジトリから提供された関数を呼び出し、ビジネスルールを適用

**具体例:**

- 訓練スケジュールの自動生成
- 利用者の訓練割当てロジック
- スタッフシフトの最適化

##### マッパー層 (Mapper Layer)

**主な責務:**

- 副作用のないデータ構造の変換
- ドメインモデルとデータ転送オブジェクト（DTO）の相互変換
- 型安全性の確保

**具体例:**

- スプレッドシートの行データをドメインオブジェクトに変換
- API レスポンスをドメインモデルに変換

### 型システム

- 厳密な型定義による安全性の確保
- インターフェースによる依存関係の明確化

## 関数型プログラミングアプローチ

### 依存性注入

- 関数が別の複数の関数に依存している複雑な依存関係を簡略化
- モデルやデータに依存するようにして依存関係を簡略化

### 純粋関数の使用

- 副作用の分離
- イミュータブルなデータ構造
- 依存性注入が可能でテスト容易性の高い設計
