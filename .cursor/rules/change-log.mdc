---
alwaysApply: true
---

# チェンジログ作成ルール

## 概要

コードを変更するたびに、必ずチェンジログを Markdown 形式で作成すること。

## 作成場所

- **ディレクトリ**: `@/change-log`
- **フォルダ構造**: 変更日の日付ごとにフォルダを作成
  - 例: `change-log/2025-07-23/`
- **ファイル名**: 分かりやすい名前で作成
  - 例: `appsheet-service-refactor.md`

## チェンジログの構成

以下の構成に従ってチェンジログを作成すること：

### 1. タイトル

```
# [変更内容の概要] - チェンジログ
```

### 2. 概要

変更の目的と内容を簡潔に説明

### 3. 完了した変更

変更対象ファイルとその内容を箇条書きで記載

- ✅ マークを使用して完了した作業を明確化

### 4. 実装された変更内容

コードの変更前後の比較を記載

### 5. 実装手順

実行した手順を番号付きリストで記載

### 6. 注意事項

変更時の制約や注意点を記載

### 7. 検証項目

- ✅ マークを使用して完了した検証項目を記載

### 8. 技術的詳細

- 変更された関数の説明
- 内部関数の説明（該当する場合）

### 9. 影響範囲

変更による影響を記載

### 10. 今後の改善点

今後の改善案や課題を記載

## テンプレート例

````markdown
# [変更内容] - チェンジログ

## 概要

[変更の目的と内容を簡潔に説明]

## 完了した変更

### 1. [カテゴリ 1]

- ✅ `[ファイルパス]`
  - [変更内容 1]
  - [変更内容 2]

### 2. [カテゴリ 2]

- ✅ `[ファイルパス]`
  - [変更内容 1]
  - [変更内容 2]

## 実装された変更内容

### [変更対象]の変更

```typescript
// 変更前
// 変更後
[変更前のコード][変更後のコード];
```

## 実装手順

1. ✅ **[手順 1]**

   - [詳細 1]
   - [詳細 2]

2. ✅ **[手順 2]**
   - [詳細 1]
   - [詳細 2]

## 注意事項

- ✅ [注意事項 1]
- ✅ [注意事項 2]

## 検証項目

- ✅ [検証項目 1]
- ✅ [検証項目 2]

## 技術的詳細

### 変更された関数

1. **[関数名 1]**

   - [説明]
   - 戻り値: [型]

2. **[関数名 2]**
   - [説明]
   - 戻り値: [型]

### 内部関数

1. **[関数名]** (非エクスポート)
   - [説明]

## 影響範囲

- [影響 1]
- [影響 2]

## 今後の改善点

- [改善点 1]
- [改善点 2]

## 作成タイミング

- コード変更が完了した時点で作成
- コミット前に作成を完了させる
- 変更内容が複数にわたる場合は、関連する変更をまとめて 1 つのチェンジログに記載

## 命名規則

- ファイル名は変更内容を端的に表現
- ハイフン区切りで単語を結合
- 例: `user-authentication-fix.md`, `database-schema-update.md`

## 品質基準

- 変更内容が後から追跡できるよう詳細に記載
- 技術的な背景や理由も含める
- 影響範囲を明確に記載
- 今後の改善点も含める
````
