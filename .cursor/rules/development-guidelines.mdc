---
description:
globs:
alwaysApply: true
---

# 開発ガイドライン

## モジュールのインポート

- [tsconfig.json](mdc:project/tsconfig.json)で設定している通り、モジュールのインポートは `@/*` を使った絶対パスで行うこと。
- 例: `import { fetchUsers } from "@/features/user/user.repository";`

## テスト戦略

### 概要

- テストライブラリは`Vitest`を用いること
- Vitest の API は [tsconfig.json](mdc:project/tsconfig.json) でグローバルにインポートできるように設定しているため各ファイルに import は不要
- 説明文は日本語を用いること

### ユニットテスト

- 各サービスの機能テスト
- モックを使用した依存関係の分離

### テストデータ

- モックデータの提供
- テストケースの網羅性確保

### 配置場所と命名規則

- テスト対象の同一ディレクトリ内に`__tests__`ディレクトリを作成する
- テストファイルのファイル名は`{オリジナルファイル名}.spec.ts`に統一する

## コード品質

### エラーハンドリング

- 型安全性によるエラー防止
- 適切なエラーメッセージ

### コード品質

- 明確な命名規則
- 適切なコメント
- モジュール化された構造

## 命名規則

### ファイル名

- 小文字の Kebab Case を使うこと
- 例: `user-repository.ts`

### 関数名

- Lower Camel Case を使うこと
- 例: `getUserById`
- 関数宣言はアロー関数を使うこと

### 定数名

- 大文字の Snake Case を使うこと
- 例: `FACILITY_NAME`
